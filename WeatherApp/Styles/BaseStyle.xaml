<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:WeatherApp.ViewModel"
                    xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
                    xmlns:local="clr-namespace:WeatherApp.Styles">
    <vm:ViewModelLocator x:Key="Locator"/>
    <SolidColorBrush x:Key="DefaultButtonBackground" Color="#58a3eb"/>
    <SolidColorBrush x:Key="DefaultButtonForeground" Color="Black"/>
    <SolidColorBrush x:Key="ActiveButtonBackground" Color="#cfe7ff"/>
    <SolidColorBrush x:Key="ActiveButtonForeground" Color="Black"/>
    <SolidColorBrush x:Key="MainPanelBackground" Color="#e6f2ff"/>
    <SolidColorBrush x:Key="TopMenuDockPanelBackground" Color="#5885ae"/>
    <SolidColorBrush x:Key="ErrorMessageForeground" Color="DarkRed"/>
    <SolidColorBrush x:Key="ZipErrorMessageForeground" Color="Red"/>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="FontFamily" Value="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"/>
    </Style>
    <Style TargetType="{x:Type Label}">
        <Setter Property="FontFamily" Value="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"/>
    </Style>
    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"/>
    </Style>
    <Style TargetType="{x:Type TextBox}" x:Key="ErrorMessageStyle">
        <Setter Property="FontFamily" Value="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"/>
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource ErrorMessageForeground}"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style TargetType="{x:Type DockPanel}" x:Key="MainPanel">
        <Setter Property="Background" Value="{DynamicResource MainPanelBackground}"/>
    </Style>
    <Style TargetType="{x:Type DockPanel}" x:Key="TopMenuDockPanel">
        <Setter Property="Background" Value="{DynamicResource TopMenuDockPanelBackground}"/>
    </Style>
    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <ContentPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="DefaultButton">
        <Setter Property="FontFamily" Value="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" Padding="5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                        <ContentPresenter VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="ActiveButtonStyle">
        <Setter Property="FontFamily" Value="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" Padding="5" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                        <ContentPresenter VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButton}">
        <Setter Property="Background" Value="{DynamicResource DefaultButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource DefaultButtonForeground}"/>
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButton}" x:Key="ActiveButton">
        <Setter Property="Background" Value="{DynamicResource ActiveButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource ActiveButtonForeground}"/>
    </Style>
    <!-- Hourly chart colors -->
    <SolidColorBrush x:Key="LvcLineSeriesPointForeground" Color="#58a3eb"/>
    <SolidColorBrush x:Key="LvcLineSeriesStroke" Color="#1f80de"/>
    <SolidColorBrush x:Key="LvcLineSeriesFill" Color="#a6ccf1"/>
    <!-- Hourly chart styles -->
    <Style TargetType="{x:Type lvc:LineSeries}">
        <Setter Property="PointForeground" Value="{DynamicResource LvcLineSeriesPointForeground}"/>
        <Setter Property="Stroke" Value="{DynamicResource LvcLineSeriesStroke}"/>
        <Setter Property="Fill" Value="{DynamicResource LvcLineSeriesFill}"/>
        <Setter Property="FontFamily" Value="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"/>
    </Style>
    <Style TargetType="{x:Type lvc:Axis}">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"/>
    </Style>
    <Style TargetType="{x:Type lvc:VerticalLineSeries}">
        <Setter Property="Stroke" Value="Black"/>
        <Setter Property="FontFamily" Value="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"/>
    </Style>
    <Style TargetType="{x:Type lvc:CartesianChart}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"/>
    </Style>
    <Style TargetType="{x:Type lvc:Separator}">
        <Setter Property="Stroke" Value="#AAAAAA"/>
    </Style>
    <!-- Combobox colors -->
    <SolidColorBrush x:Key="ComboBoxItemBackground" Color="White"/>
    <SolidColorBrush x:Key="ComboBoxItemHighlightedBackground" Color="#FFA0CADD"/>
    <SolidColorBrush x:Key="ComboBoxNormalBorderBrush" Color="#111111"/>
    <SolidColorBrush x:Key="ComboBoxArrowShapeFill" Color="#111111"/>
    <SolidColorBrush x:Key="ComboBoxArrowActiveShapeFill" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="ComboBoxArrowBackground" Color="#CCCCCC"/>
    <SolidColorBrush x:Key="ComboBoxArrowHoverBackground" Color="#DDDDDD"/>
    <SolidColorBrush x:Key="ComboBoxArrowActiveBackground" Color="#222222"/>

    <!-- Combobox template -->
    <ControlTemplate TargetType="{x:Type ToggleButton}" x:Key="ComboBoxToggleButtonTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="20"/>
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="2" Name="Border" BorderBrush="{DynamicResource ComboBoxNormalBorderBrush}"
                    CornerRadius="0" BorderThickness="1,1,1,1"
                    Background="{DynamicResource ComboBoxItemBackground}"/>
            <Border Grid.Column="1" Margin="1, 1, 1, 1" BorderBrush="#444" Name="ButtonBorder"
              CornerRadius="0, 0, 0, 0" BorderThickness="0, 0, 0, 0" 
              Background="{DynamicResource ComboBoxArrowBackground}" />
            <Path Name="Arrow" Grid.Column="1" 
            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
            HorizontalAlignment="Center" Fill="{DynamicResource ComboBoxArrowShapeFill}"
            VerticalAlignment="Center" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{DynamicResource ComboBoxArrowHoverBackground}"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{DynamicResource ComboBoxArrowActiveBackground}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="{DynamicResource ComboBoxArrowActiveShapeFill}"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Panel.Background" TargetName="Border" Value="{DynamicResource Test1}"/>
                <Setter Property="Panel.Background" TargetName="ButtonBorder" Value="{DynamicResource Test1}"/>
                <Setter Property="Border.BorderBrush" TargetName="ButtonBorder" Value="{DynamicResource Test1}"/>
                <Setter Property="TextElement.Foreground" Value="{DynamicResource Test1}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="MediumVioletRed"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="Black"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FontFamily" Value="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton x:Name="ToggleButton" Grid.Column="2"
                                      ClickMode="Press" Focusable="False"
                                      IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                      Template="{StaticResource ComboBoxToggleButtonTemplate}"/>
                        <ContentPresenter x:Name="ContentSite" Margin="5,3,23,3" IsHitTestVisible="False"
                                          HorizontalAlignment="Left" VerticalAlignment="Center"
                                          Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>
                        <TextBox x:Name="PART_EditableTextBox" Margin="3,3,23,3"
                                 FontFamily="{Binding Source={StaticResource Locator},Path=UserSettingsVm.ActiveFontVm.DisplayName}"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 Visibility="Hidden" Background="Transparent"
                                 HorizontalAlignment="Left" VerticalAlignment="Center" Focusable="True">
                            <TextBox.Template>
                                <ControlTemplate TargetType="{x:Type TextBox}">
                                    <Border x:Name="PART_ContentHost" Focusable="False"/>
                                </ControlTemplate>
                            </TextBox.Template>
                        </TextBox>
                        <!-- Popup showing items list -->
                        <Popup x:Name="Popup" Placement="Bottom"
                               Focusable="False" AllowsTransparency="True"
                               IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                               PopupAnimation="Slide">
                            <Grid x:Name="DropDown" SnapsToDevicePixels="True"
                                  MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                                  MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}">
                                <Border Name="DropDownBorder" Background="White" Margin="0,1,0,0"
                                        CornerRadius="0" BorderThickness="1,1,1,1"
                                        BorderBrush="{DynamicResource ComboBoxNormalBorderBrush}">
                                    <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="LightGoldenrodYellow"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Border">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ComboBoxItemHighlightedBackground}"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource ComboBoxItemBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>